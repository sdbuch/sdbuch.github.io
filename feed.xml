<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="4.3.3">Jekyll</generator>
  
  
  <link href="http://sdbuchanan.com/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://sdbuchanan.com/" rel="alternate" type="text/html" />
  <updated>2025-09-01T20:47:24-07:00</updated>
  <id>http://sdbuchanan.com//</id>

  
    <title type="html">Sam D. Buchanan</title>
  

  
    <subtitle>Homepage of Sam D. Buchanan, researcher in the mathematics of data science and deep learning.</subtitle>
  

  
    <author>
        <name>Sam Buchanan</name>
      
        <email>sam@ttic.edu</email>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">SPMD in JAX #1: Sharding</title>
      
      
      <link href="http://sdbuchanan.com/blog/jax-1/" rel="alternate" type="text/html" title="SPMD in JAX #1: Sharding" />
      
      <published>2025-08-20T00:00:00-07:00</published>
      <updated>2025-08-20T00:00:00-07:00</updated>
      <id>http://sdbuchanan.com/blog/jax-1</id>
      <content type="html" xml:base="http://sdbuchanan.com/blog/jax-1/">&lt;p&gt;This post will be the first in a series on programming with JAX, for training
models like transformers. I’m experimenting with these as an alternative to my
usual scratch paper or LaTeX notes while learning, in the hope that it will help
me with recall and perhaps be useful to others learning this material.&lt;/p&gt;

&lt;p&gt;The focus in this post is on building a mental model (mathematical) for
sharding and communication based on linear algebra, in particular block
matrices, and on studying some low-level code for different communication
primitives.
The notes are based on two tutorials on sharding: &lt;a class=&quot;citation&quot; href=&quot;#scaling-book&quot;&gt;(Austin et al., 2025)&lt;/a&gt;
and &lt;a class=&quot;citation&quot; href=&quot;#jax_sharded_computation&quot;&gt;(JAX Team, 2025)&lt;/a&gt;, as well as some ‘original research’.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot; id=&quot;markdown-toc-setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sharding&quot; id=&quot;markdown-toc-sharding&quot;&gt;Sharding&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#valid-shardings&quot; id=&quot;markdown-toc-valid-shardings&quot;&gt;Valid Shardings&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-matrix-multiplication&quot; id=&quot;markdown-toc-example-matrix-multiplication&quot;&gt;Example: Matrix Multiplication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#types-of-inter-device-communication-with-sharded-computation&quot; id=&quot;markdown-toc-types-of-inter-device-communication-with-sharded-computation&quot;&gt;Types of Inter-Device Communication with Sharded Computation&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#communication-primitives-through-matrix-multiplication&quot; id=&quot;markdown-toc-communication-primitives-through-matrix-multiplication&quot;&gt;Communication Primitives through Matrix Multiplication&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#case-1-unsharded-contracting-dimension-valid-output&quot; id=&quot;markdown-toc-case-1-unsharded-contracting-dimension-valid-output&quot;&gt;Case 1: Unsharded Contracting Dimension, Valid Output&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#case-2-one-multiplicand-sharded-along-contracting-dimension-allgather&quot; id=&quot;markdown-toc-case-2-one-multiplicand-sharded-along-contracting-dimension-allgather&quot;&gt;Case 2: One Multiplicand Sharded Along Contracting Dimension (AllGather)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#case-3-both-multiplicands-sharded-along-contracting-dimension-allreduce&quot; id=&quot;markdown-toc-case-3-both-multiplicands-sharded-along-contracting-dimension-allreduce&quot;&gt;Case 3: Both Multiplicands Sharded Along Contracting Dimension (AllReduce)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#case-4-sharded-non-contracting-dimensions-same-axis&quot; id=&quot;markdown-toc-case-4-sharded-non-contracting-dimensions-same-axis&quot;&gt;Case 4: Sharded Non-Contracting Dimensions, Same Axis&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#alltoall-communication&quot; id=&quot;markdown-toc-alltoall-communication&quot;&gt;AllToAll Communication&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-communication-primitives-in-jax&quot; id=&quot;markdown-toc-example-communication-primitives-in-jax&quot;&gt;Example: Communication Primitives in JAX&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#allgather&quot; id=&quot;markdown-toc-allgather&quot;&gt;AllGather&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#alltoall&quot; id=&quot;markdown-toc-alltoall&quot;&gt;AllToAll&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#allreduce-and-reducescatter&quot; id=&quot;markdown-toc-allreduce-and-reducescatter&quot;&gt;AllReduce and ReduceScatter&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#acknowledgments&quot; id=&quot;markdown-toc-acknowledgments&quot;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Here’s the environment we will be working in—using Python 3.13 and JAX 0.7.1,
on a single TPU v4 host.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax.numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jnp&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
[TpuDevice(id=0, process_index=0, coords=(0,0,0), core_on_chip=0),
 TpuDevice(id=1, process_index=0, coords=(1,0,0), core_on_chip=0),
 TpuDevice(id=2, process_index=0, coords=(0,1,0), core_on_chip=0),
 TpuDevice(id=3, process_index=0, coords=(1,1,0), core_on_chip=0)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;sharding&quot;&gt;Sharding&lt;/h1&gt;

&lt;p&gt;When we want to perform a high-throughput computation involving some data and
some mathematical operations (e.g., passing data through layers of a neural
network) using multiple hardware accelerators (e.g., TPUs), we need to, at
a minimum:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Have a scheme for indexing hardware accelerators relative to their physical
(spatial) layout.&lt;/li&gt;
  &lt;li&gt;Specify what data and what parameters (inputs) go on which accelerators.&lt;/li&gt;
  &lt;li&gt;Specify where the outputs of the computation should go.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In JAX, these three steps are abstracted into creation of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh&lt;/code&gt; specifying
device layout and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PartitionSpec&lt;/code&gt; specifying how data is split across devices
relative to this mesh. Such a splitting is called a sharding.&lt;/p&gt;

&lt;p&gt;Here’s how the first two steps look in code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 1x v4 tpu host
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;visualize_array_sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
┌──────────┬──────────┐
│          │          │
│  TPU 0   │  TPU 1   │
│          │          │
│          │          │
├──────────┼──────────┤
│          │          │
│  TPU 2   │  TPU 3   │
│          │          │
│          │          │
└──────────┴──────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh&lt;/code&gt; indexes devices based on spatial axes. JAX will optimize this
indexing based on the actual device topology.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NamedSharding&lt;/code&gt; creates a sharding specification relative to the mesh,
which is defined by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PartitionSpec&lt;/code&gt; we provide. Here, we specify that a 2D
array has its first dimension sharded along the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; dimension of the mesh and
its second dimension along &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PartitionSpec&lt;/code&gt;, we give &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; for dimensions that should not be
sharded. That means this dimension will be present on all devices.&lt;/li&gt;
  &lt;li&gt;If a mesh axis does not appear in the sharding, then the sharded array is
fully replicated over that axis. In the extreme case, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NamedSharding&lt;/code&gt; of all
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;s puts the full array on every device.&lt;/li&gt;
  &lt;li&gt;The compiler will complain about invalid shardings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can also move data around after creation on, say, one host.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B_sharded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;device_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;visualize_array_sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;visualize_array_sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B_sharded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
┌───────────────────────┐
│                       │
│                       │
│                       │
│                       │
│         TPU 0         │
│                       │
│                       │
│                       │
│                       │
└───────────────────────┘
┌──────────┬──────────┐
│          │          │
│  TPU 0   │  TPU 1   │
│          │          │
│          │          │
├──────────┼──────────┤
│          │          │
│  TPU 2   │  TPU 3   │
│          │          │
│          │          │
└──────────┴──────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition, we can ‘combine’ physical device axes into one or more aggregated
axes. This is a common operation, for example in parallelizing a batch axis
across all devices. Since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh&lt;/code&gt; is our link between partition indices and
physical devices, we do this through the mesh:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mesh_flat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sharding_flat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh_flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharding_flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;visualize_array_sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
┌───────────────────────┐
│         TPU 0         │
├───────────────────────┤
│         TPU 2         │
├───────────────────────┤
│         TPU 1         │
├───────────────────────┤
│         TPU 3         │
└───────────────────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we perform computations on data, we can either let the JAX compiler infer
the output sharding, or we can specify it ourselves.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@jax.jit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f_contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@partial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out_shardings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f_contract_replicated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f_contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B_sharded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result_replicated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f_contract_replicated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B_sharded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Inferred sharding:&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;visualize_array_sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Manual sharding (replicated):&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;visualize_array_sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_replicated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
Inferred sharding:
┌───────┬───────┐
│TPU 0,2│TPU 1,3│
└───────┴───────┘
Manual sharding (replicated):
┌───────────┐
│TPU 0,1,2,3│
└───────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Passing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NamedSharding&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jax.jit&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out_shardings&lt;/code&gt; keyword argument lets
us specify here that the result of the computation should be propagated to all
devices. This entails some communication!&lt;/p&gt;

&lt;p&gt;Given a valid input-output sharding for a more complex computation, the JAX
compiler can heuristically optimize the inner bits of the computation
(intermediate computations’ shardings, and necessary communication) to try to
make it run as efficiently as possible. In cases where this doesn’t work, JAX
has ways to hint at the compiler, as well as more advanced programming
paradigms, to explicitly specify intermediate sharding and communications.&lt;/p&gt;

&lt;h2 id=&quot;valid-shardings&quot;&gt;Valid Shardings&lt;/h2&gt;

&lt;p&gt;Given a mesh with $M$ axes, and an array with $N$ axes, we can enumerate all
valid shardings as follows. First note:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A sharding corresponds to, for each of the $N$ array axes, the selection of
one of the $M$ mesh axes, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Each mesh axis can appear at most once in a valid sharding.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then for each $k = 0, \dots, \min \set{M, N}$, pick $\binom{M}{k}$ of the $M$
mesh axes and $\binom{N}{k}$ of the $N$ array axes, then consider all possible
permutations of those $k$ selected axes. This is a total of&lt;/p&gt;

\[\sum_{k=0}^{\min \set{M, N}} \binom{M}{k} \binom{N}{k} k!\]

&lt;p&gt;possible shardings. This is actually not too large—roughly on the order of
$N^M$ when $N$ is large.&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&quot;example-matrix-multiplication&quot;&gt;Example: Matrix Multiplication&lt;/h1&gt;

&lt;p&gt;The most common operations in neural networks are related to matrix
multiplications, and so thinking in terms of sharding data with two axes goes
a long way. Say we have matrices $\vA \in \bbR^{m \times n}$ and $\vB \in
\bbR^{n \times p}$. A sharding of a 2D array (matrix) corresponds to two things:
a partitioning of the matrix into sub-matrices, and a splitting of those
sub-matrices across devices. In JAX, these two operations are coupled through
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NamedSharding&lt;/code&gt; interface, as we described above:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If an array dimension is sharded across a mesh axis, that dimension is
partitioned, and the partitioned components will be split across that
mesh axis.&lt;/li&gt;
  &lt;li&gt;If an array dimension is not sharded, that dimension is not partitioned, and
it appears across all devices.&lt;/li&gt;
  &lt;li&gt;If a mesh axis does not appear in a sharding specification, the sharded data
is copied across that mesh axis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s consider the special case of a 2D mesh, in particular $2 \times 2$. For
simplicity, let’s place the first mesh axis in correspondence with the first
array dimension, and the second mesh axis in correspondence with the second
array dimension.&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Then every partitioning of $\vA$ or $\vB$, for example&lt;/p&gt;

\[\begin{equation}\label{eq:partitioning-0}
\begin{bmatrix}
  \vA_{00} &amp;amp; \vA_{01} \\
  \vA_{10} &amp;amp; \vA_{11}
\end{bmatrix},
\end{equation}\]

&lt;p&gt;corresponds to an arrangement of the matrix across devices. In the above example,
we have $\vA_{ij} \in \bbR^{(m/2) \times (n/2)}$, and the coordinates $(i, j)$
of the submatrix correspond to the coordinates of the device it is stored on.
For a different partitioning, for example&lt;/p&gt;

\[\begin{bmatrix}
  \vA_{0} \\
  \vA_{1}
\end{bmatrix},\]

&lt;p&gt;we need to take copying into account: here we have $\vA_{i} \in \bbR^{(m/2)
\times n}$, and the physical device layout is&lt;/p&gt;

\[\begin{equation}\label{eq:partitioning-1-dev}
\begin{bmatrix}
  \vA_{0} &amp;amp; \vA_{0} \\
  \vA_{1} &amp;amp; \vA_{1}
\end{bmatrix}.
\end{equation}\]

&lt;p&gt;Notice that $\eqref{eq:partitioning-0}$ and $\eqref{eq:partitioning-1-dev}$ are
incomparable: the second one uses twice as much memory! But there is a simple
‘algorithm’ to go from a partitioning to a device layout: if an axis is not
partitioned, simply copy the array along that axis to reach the full mesh size
(and remember that this leads to additional memory usage).&lt;/p&gt;

&lt;p&gt;Now, what happens if we want to compute the product $\vA \vB$ when $\vA$ is
sharded in some way, for example as in $\eqref{eq:partitioning-0}$?
First, thinking abstractly: by properties of block matrix multiplication, we
have&lt;/p&gt;

\[\vA \vB
=
\begin{bmatrix}
  \vA_{11} &amp;amp; \vA_{12} \\
  \vA_{21} &amp;amp; \vA_{22}
\end{bmatrix}
\begin{bmatrix}
  \vB_{11} &amp;amp; \vB_{12} \\
  \vB_{21} &amp;amp; \vB_{22}
\end{bmatrix}
=
\begin{bmatrix}
  \vA_{11}\vB_{11} + \vA_{12} \vB_{21} &amp;amp; \vA_{11}\vB_{12} + \vA_{12} \vB_{22} \\
  \vA_{21}\vB_{11} + \vA_{22} \vB_{21} &amp;amp; \vA_{21}\vB_{12} + \vA_{22} \vB_{22} \\
\end{bmatrix}.\]

&lt;p&gt;So no matter how $\vB$ is sharded, we need to perform communication such that we
compute each of the matrix products appearing above. We can think about two
cases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;No communication involving $\vA$&lt;/strong&gt;: Here, we can use the RHS of the above
display to tell us what needs to be computed. Processor $(0, 0)$ needs the
first (block) row of $\vB$, processor $(0, 1)$ needs the second (block) row of
$\vB$, etc.—so the sharding of $\vB$ had better support this, or
communication will be necessary. &lt;em&gt;Regardless&lt;/em&gt;, some communication between
devices is necessary to accumulate the block matrix products: e.g., we need to
add results from processor $(0, 0)$ and $(0, 1)$ to get the top-left block of
the product.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;We can re-structure how $\vA$ is sharded&lt;/strong&gt;: It might be possible, given
a specific sharding for $\vB$, to have a more efficient computation by
sharding $\vA$ differently (and vice versa). Thinking in terms of
block partitions, this is the same as observing that there are many ways of
partitioning a matrix into blocks, each of which gives a different
decomposition for the matrix product. For example, this is also a compatible
partitioning (with suitable definitions of the blocks):&lt;/p&gt;

\[\begin{equation}\label{eq:nice-sharding}
\vA \vB
=
\begin{bmatrix}
  \vA_{1} \\
  \vA_{2}
\end{bmatrix}
\begin{bmatrix}
  \vB_{1} &amp;amp; \vB_{2}
\end{bmatrix}
=
\begin{bmatrix}
  \vA_{1}\vB_{1} &amp;amp; \vA_{1}\vB_{2} \\
  \vA_{2}\vB_{1} &amp;amp; \vA_{2}\vB_{2}
\end{bmatrix},
\end{equation}\]

    &lt;p&gt;and so is&lt;/p&gt;

\[\vA \vB
=
\begin{bmatrix}
  \vA_{1} &amp;amp; \vA_{2}
\end{bmatrix}
\begin{bmatrix}
  \vB_{1} \\
  \vB_{2}
\end{bmatrix}
=
\vA_1 \vB_1 + \vA_2 \vB_2.\]

    &lt;p&gt;Re-sharding requires communication, though, and so this may or may not be more
efficient.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an exercise, verify that $\eqref{eq:nice-sharding}$ corresponds to
a zero-communication sharding for a $2 \times 2$ output sharding.&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Now, if $\vA$ and $\vB$ both have their own sharding, in general these
correspond to (possibly incompatible) block matrix partitions of each matrix.
For each individual partition, we can, as above, write out the blockwise matrix products
and accumulation operations needed to compute the product, and try to intuit
what computation/communication should happen—in particular involving
re-sharding one or both arrays. In JAX, the XLA compiler will be recruited to
perform this optimization; as algorithm designers, we can try to provide
sensible shardings up front in order to make sure we end up with an efficient
system.&lt;/p&gt;

&lt;h1 id=&quot;types-of-inter-device-communication-with-sharded-computation&quot;&gt;Types of Inter-Device Communication with Sharded Computation&lt;/h1&gt;

&lt;p&gt;The matrix multiplication example suggests that different forms of communication
naturally arise in distributed computation. We will describe the ones that are
implemented in XLA here. The JAX scaling book &lt;a class=&quot;citation&quot; href=&quot;#scaling-book&quot;&gt;(Austin et al., 2025)&lt;/a&gt; gives
a nice way to think about matrix multiplication of sharded arrays using
a variant of named-axis notation. Since this is closer to code, we’ll describe
this briefly below.&lt;/p&gt;

&lt;h2 id=&quot;communication-primitives-through-matrix-multiplication&quot;&gt;Communication Primitives through Matrix Multiplication&lt;/h2&gt;

&lt;p&gt;We saw in the previous section how to think about sharding of 2D arrays in terms
of block matrices:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sharded array axes are partitioned; non-sharded array axes aren’t.&lt;/li&gt;
  &lt;li&gt;Any mesh axis that isn’t used means the partitioned array is copied across
that axis.
This gives us a scheme to map a block matrix to the corresponding arrangement of
that matrix across physical devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With named index notation, things are more compact. Consider a 2D mesh with axes
$x$ and $y$, and let us write $A[I, J]$ for the 2D array $\vA$ (likewise for
$\vB$) we looked at in the previous section. We write $A[I_x, J]$ (etc.) to
denote the sharding of $A$ along its first dimension with respect to the mesh
axis $x$. The use of $I$, $J$, etc.\ for ‘dummy’ indices is in analogy to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;einsum&lt;/code&gt;-type notation, which is very useful for tensor operations.&lt;/p&gt;

&lt;p&gt;Now consider a matrix product of sharded matrices $A[I_x, J] \cdot B[J, K_y]$.
Suppose we want the output, say $\vC$, to be sharded as $C[I_x, K_y]$. Then this
matrix product can be computed &lt;em&gt;with no communication&lt;/em&gt;: to see why, think in
terms of the correspondence to block matrix partitions and their associated map
to device arrangements in the previous section. However, for an unsharded output
$C[I, K]$, it would be necessary to perform some communication—either
calculating $C[I_x, K_y]$ and then sharing the local results among all devices,
or something else.&lt;/p&gt;

&lt;p&gt;The following is a convenient way to think about this, following the previous
example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Given a sharding of matrix multiplicands $A$, $B$, there is a ‘natural’ output
sharding whenever the contracting dimension is unsharded. (As above, this
comes by ‘removing’ the contracting axis, just like in einsum notation.) If
this sharding is invalid, communication is necessary.&lt;/li&gt;
  &lt;li&gt;If the contracting dimension is sharded, different types of communication are
necessary to turn the multiplication into one with an unsharded contracting
dimension. We can identify typical ‘best practices’ for what communication
type to use based on how the contracting dimension is sharded.&lt;/li&gt;
  &lt;li&gt;If an output sharding is specified and it is not the ‘natural’ one, some
communication is required to achieve it. We can use the techniques from either
of the two previous bullets to do this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll describe these different cases below.&lt;/p&gt;

&lt;h3 id=&quot;case-1-unsharded-contracting-dimension-valid-output&quot;&gt;Case 1: Unsharded Contracting Dimension, Valid Output&lt;/h3&gt;

&lt;p&gt;As above, the ‘natural’ output sharding is just an einsum-style replacement:&lt;/p&gt;

\[A[I_x, J] \cdot B[J, K] \to C[I_x, K].\]

&lt;p&gt;If this natural output sharding is invalid, we need to do something else (see
below).&lt;/p&gt;

&lt;h3 id=&quot;case-2-one-multiplicand-sharded-along-contracting-dimension-allgather&quot;&gt;Case 2: One Multiplicand Sharded Along Contracting Dimension (AllGather)&lt;/h3&gt;

&lt;p&gt;For a product like&lt;/p&gt;

\[A[I, J_x] \cdot B[J, K] \to C[I, K],\]

&lt;p&gt;it isn’t possible to directly perform the multiplication, because in order to
contract, we either need to perform a series of block-matrix multiplies, then
accumulate the results (see below), or have the entire contracting dimension of
both arrays available on all devices (see above).&lt;/p&gt;

&lt;p&gt;We use &lt;strong&gt;AllGather&lt;/strong&gt; for this, which removes a specified sharded axis:&lt;/p&gt;

\[\mathrm{AllGather}_{x}(A[I, J_x]) \to A[I, J].\]

&lt;p&gt;For a compound mesh, AllGather can also just remove one sub-axis:&lt;/p&gt;

\[\mathrm{AllGather}_{x}(A[I, J_{xy}]) \to A[I, J_y].\]

&lt;p&gt;AllGather can also be used to satisfy certain output shardings that aren’t
naturally compatible with the input shardings. For example, in the product&lt;/p&gt;

\[A[I_x, J] \cdot B[J, K] \to C[I, K],\]

&lt;p&gt;one removes the sharded axis either before or after the computation in order to
achieve the desired output sharding.&lt;/p&gt;

&lt;h4 id=&quot;allgather-cost&quot;&gt;AllGather Cost&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;On TPUs&lt;/strong&gt; with enough chips to form a cube, AllGather can be performed using
algorithms that exploit the toroidal interconnectivity of TPU devices. For
example, to AllGather a single axis, the following procedure can be used:[^5]&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Initialize a local buffer on each device with its local shard.&lt;/li&gt;
  &lt;li&gt;Send the buffer contents to the next device; overwrite it with the contents of
  the previous device.&lt;/li&gt;
  &lt;li&gt;Store the received shard in memory.&lt;/li&gt;
  &lt;li&gt;Repeat.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This takes at most $N/2$ rounds of communication if the mesh axis has size $N$.
For an array of size $V$ bytes, each round sends $V/N$ bytes over each link.
Given an ICI bandwidth of $W$ (unidirectional),&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; the total time this takes is
no more than&lt;/p&gt;

\[\frac{N}{2} \cdot \frac{V}{NW} = \frac{V}{2W} \text{ s},\]

&lt;p&gt;which is independent of the size of the mesh.
However, one must also take into account the intrinsic overhead of ICI
communication. Each operation takes around $T_{\min} = 10^{-6} \text{ s}$ &lt;a class=&quot;citation&quot; href=&quot;#scaling-book&quot;&gt;(Austin et al., 2025)&lt;/a&gt;, so the total time is actually only bounded by&lt;/p&gt;

\[\max \set*{\frac{V}{2W}, \frac{NT_{\min}}{2}}.\]

&lt;p&gt;In particular, there are &lt;em&gt;latency-bound&lt;/em&gt; (small array size) and
&lt;em&gt;throughput-bound&lt;/em&gt; (large array size) regimes of communication.&lt;/p&gt;

&lt;p&gt;AllGathering a compound axis (e.g., $xy$) is similar: one can utilize some
per-device state to efficiently communicate data across the entire
multidimensional mesh. Since each device can then communicate along each mesh
axis simultaneously, the bandwidth increases by a factor proportional to the
number of mesh axes, but the maximum possible latency also increases, since
there are more devices. The total time is no larger than&lt;/p&gt;

\[\max \set*{\frac{V}{2n_{\mathrm{axes}}W}, \frac{N_{\mathrm{total}}T_{\min}}{2}},\]

&lt;p&gt;where $N_{\mathrm{total}}$ is the product of the axes lengths.&lt;/p&gt;

&lt;h3 id=&quot;case-3-both-multiplicands-sharded-along-contracting-dimension-allreduce&quot;&gt;Case 3: Both Multiplicands Sharded Along Contracting Dimension (AllReduce)&lt;/h3&gt;

&lt;p&gt;In this case, we want to compute a matrix product like&lt;/p&gt;

\[A[I, J_x] \cdot B[J_x, K] \to C[I, K].\]

&lt;p&gt;Thinking in terms of block matrices, we know that computing this matrix product
entails a sum of the block matrix multiplications corresponding to the shards of
both $A$ and $B$, and since the contracting axis is sharded, we can:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Compute per-device multiplications of the sharded matrices.&lt;/li&gt;
  &lt;li&gt;Add these up.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The communication primitive that performs this reduction is called
&lt;strong&gt;AllReduce&lt;/strong&gt;. It is similar to AllGather, but it sums up the components being
communicated, and distributes the resulting sum to all devices.&lt;/p&gt;

&lt;p&gt;We will use the notation from &lt;a class=&quot;citation&quot; href=&quot;#scaling-book&quot;&gt;(Austin et al., 2025)&lt;/a&gt;: we write&lt;/p&gt;

\[C[I, K]\{ U_x \}\]

&lt;p&gt;to denote an array $C$ which is “unreduced” over the mesh axis $x$, i.e. the
partial products are sharded over the $x$ mesh axis, which gives&lt;/p&gt;

\[\mathrm{AllReduce}_y\left( A[I_x, J]\{ U_y \} \right) \to A[I_x, J]\]

&lt;p&gt;as the signature for AllReduce.&lt;/p&gt;

&lt;h4 id=&quot;decomposition-in-terms-of-reducescatter&quot;&gt;Decomposition in Terms of ReduceScatter&lt;/h4&gt;

&lt;p&gt;Generally, an AllReduce is about &lt;em&gt;two times as expensive as an AllGather&lt;/em&gt;. One way
to see why is to decompose it into another useful communication primitive: the
&lt;strong&gt;ReduceScatter&lt;/strong&gt; operation.&lt;/p&gt;

&lt;p&gt;ReduceScatter has signature&lt;/p&gt;

\[\mathrm{ReduceScatter}_{y, J}\left( A[I_x, J]\{ U_y \} \right) \to A[I_x, J_y].\]

&lt;p&gt;It takes an array unreduced along a mesh axis, then shards the array along
a specified array axis with respect to that mesh axis. To compute an AllReduce,
we can compose a ReduceScatter with an AllGather:&lt;/p&gt;

\[\mathrm{AllReduce}_y\left( A[I_x, J]\{ U_y \} \right)
=
\mathrm{AllGather}_{y}\left(
\mathrm{ReduceScatter}_{y, J}\left( A[I_x, J]\{ U_y \} \right)
\right).\]

&lt;p&gt;For multidimensional arrays, there is a possibility to choose the array axis
that is ReduceScattered to optimize performance.&lt;/p&gt;

&lt;p&gt;ReduceScatter can be performed by an algorithm similar to the approach we
discussed for AllGather. The process is somewhat difficult to describe
algorithmically, but there is a very good pictorial representation in &lt;a class=&quot;citation&quot; href=&quot;#scaling-book&quot;&gt;(Austin et al., 2025)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/reduce-scatter.gif&quot; alt=&quot;Reduce Scatter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The upshot is that this similarity persists to the latency and
throughput analysis of the algorithm, making it identical to that of AllGather.
This demonstrates the cost of AllReduce as twice that of AllGather.&lt;/p&gt;

&lt;h4 id=&quot;aside-the-backward-pass&quot;&gt;Aside: The Backward Pass&lt;/h4&gt;

&lt;p&gt;There is a more fundamental relationship between the AllGather and ReduceScatter
operations, suggested by the representation of AllReduce above: they can be
represented as adjoints of one another, which means that an AllGather in the
forward pass will trigger a ReduceScatter in the backward pass!&lt;/p&gt;

&lt;p&gt;To see this, let’s go back to our more visual block matrix example. As above,
consider a simplified setting where a matrix is sharded along a 1D mesh
corresponding to the first array dimension. With mesh size $3$ for simplicity,
we represent this as the block matrix&lt;/p&gt;

\[\vA = \begin{bmatrix}
\vA_0 \\
\vA_1 \\
\vA_2
\end{bmatrix}.\]

&lt;p&gt;Remember that the partitioning of the block matrix corresponds to the device
layout in this model.
Now, if we perform an AllGather, we have the ($3\times$ larger) block matrix
output&lt;/p&gt;

\[\mathrm{AllGather}(\vA) = \begin{bmatrix}
\vA \\
\vA \\
\vA
\end{bmatrix}
=
\begin{bmatrix}
\begin{bmatrix}
\vA_0 \\
\vA_1 \\
\vA_2
\end{bmatrix}
\\
\begin{bmatrix}
\vA_0 \\
\vA_1 \\
\vA_2
\end{bmatrix}
\\
\begin{bmatrix}
\vA_0 \\
\vA_1 \\
\vA_2
\end{bmatrix}
\end{bmatrix}.\]

&lt;p&gt;Let’s imagine we perform some subsequent computations on the AllGathered output,
and we want to compute a backward pass. In general, each individual device will
have different gradients, which we can write in partitioned form as&lt;/p&gt;

\[\begin{bmatrix}
\Delta \vA^0 \\
\Delta \vA^1 \\
\Delta \vA^2
\end{bmatrix}
=
\begin{bmatrix}
\begin{bmatrix}
\Delta \vA_0^0 \\
\Delta \vA_1^0 \\
\Delta \vA_2^0
\end{bmatrix}
\\
\begin{bmatrix}
\Delta \vA_0^1 \\
\Delta \vA_1^1 \\
\Delta \vA_2^1
\end{bmatrix}
\\
\begin{bmatrix}
\Delta \vA_0^2 \\
\Delta \vA_1^2 \\
\Delta \vA_2^2
\end{bmatrix}
\end{bmatrix}.\]

&lt;p&gt;Then because AllGather behaves in the sense of linear algebra as a copying
operation, its backward pass involves its adjoint operation, which is a sum.
We end up with&lt;sup id=&quot;fnref:7&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

\[\mathrm{dAllGather}^* \left(
\begin{bmatrix}
\Delta \vA^0 \\
\Delta \vA^1 \\
\Delta \vA^2
\end{bmatrix}
\right)
=
\begin{bmatrix}
\sum_{i=1}^3\Delta \vA^i_0 \\
\sum_{i=1}^3 \Delta \vA^i_1 \\
\sum_{i=1}^3 \Delta \vA^i_2
\end{bmatrix}.\]

&lt;p&gt;This is exactly what we’d get if we:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Interpret the per-device gradients as unreduced partial sums with respect to
the mesh axis of the AllGather;&lt;/li&gt;
  &lt;li&gt;Perform a ReduceScatter with respect to this mesh axis and the array axis
that was sharded before the AllGather.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, an AllGather in the forward pass produces a corresponding ReduceScatter in
the backward pass!&lt;/p&gt;

&lt;p&gt;Similarly, if there is a ReduceScatter in the forward pass that produces an
array sharded along one of its axes, then in the backward pass, there will be an
AllGather operation along that axis in the backward pass.
And finally, because an AllReduce can be expressed as the composition of
an AllGather with a ReduceScatter, &lt;em&gt;the backward pass of an AllReduce is an
AllReduce&lt;/em&gt;!&lt;/p&gt;

&lt;h3 id=&quot;case-4-sharded-non-contracting-dimensions-same-axis&quot;&gt;Case 4: Sharded Non-Contracting Dimensions, Same Axis&lt;/h3&gt;

&lt;p&gt;A direct reduction to the natural sharding for this case would lead to an
invalid sharding:&lt;/p&gt;

\[A[I_x, J] \cdot B[J, K_x] \to C[I_x, K_x]\]

&lt;p&gt;A mesh axis cannot appear multiple times in a sharding specification.&lt;/p&gt;

&lt;p&gt;To resolve this, we just AllGather one of the axes in the multiplicands:&lt;/p&gt;

\[\begin{split}
\mathrm{AllGather}_x(A[I_x, J]) \to A[I, J] \\
A[I, J] \cdot B[J, K_x] \to C[I, K_x].
\end{split}\]

&lt;p&gt;We can select which depending on the downstream shardings needed.&lt;/p&gt;

&lt;h2 id=&quot;alltoall-communication&quot;&gt;AllToAll Communication&lt;/h2&gt;

&lt;p&gt;This primitive can be thought of as a resharding operation. It has signature&lt;/p&gt;

\[\mathrm{AllToAll}_{x, J}( A[I_x, J] ) \to A[I, J_x].\]

&lt;p&gt;AllToAll is actually significantly cheaper than an AllGather, by a factor of 4.
This is another one where the excellent picture from &lt;a class=&quot;citation&quot; href=&quot;#scaling-book&quot;&gt;(Austin et al., 2025)&lt;/a&gt;
describes where this efficiency is coming from well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/all-to-all.gif&quot; alt=&quot;All To All&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that the message
that is being sent over each link is composed of pieces of different lengths
from each shard. The communication is balanced, but later messages are shorter,
which may cause issues with latency-boundedness of the communication.&lt;/p&gt;

&lt;h1 id=&quot;example-communication-primitives-in-jax&quot;&gt;Example: Communication Primitives in JAX&lt;/h1&gt;

&lt;p&gt;Let’s test out what we learned above in the JAX sandbox we started this post
with. For slightly more granular control of sharding, we’ll switch to Explicit
mode sharding (see e.g. &lt;a class=&quot;citation&quot; href=&quot;#jax-explicit-sharding&quot;&gt;(JAX Team, 2025)&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AxisType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Explicit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 1x v4 tpu host
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bfloat16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
ShapedArray(bfloat16[2048@x,8192@y])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;allgather&quot;&gt;AllGather&lt;/h2&gt;

&lt;p&gt;First, a simple AllGather implementation along the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; mesh axis—we compile
the resharding operation and inspect the “high-level operations” (HLO) to see
what actually gets implemented on the device.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@jax.jit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all_gather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reshard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_gather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Output type: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;StableHLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XLA HLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
Output type:  bfloat16[2048@x,8192]

StableHLO:
 module @jit_all_gather attributes {mhlo.num_partitions = 4 : i32, mhlo.num_replicas = 1 : i32} {
  sdy.mesh @mesh = &amp;lt;[&quot;x&quot;=2, &quot;y&quot;=2]&amp;gt;
  func.func public @main(%arg0: tensor&amp;lt;2048x8192xbf16&amp;gt; {sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{&quot;x&quot;}, {&quot;y&quot;}]&amp;gt;}) -&amp;gt; (tensor&amp;lt;2048x8192xbf16&amp;gt; {jax.result_info = &quot;result&quot;, sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{&quot;x&quot;}, {}]&amp;gt;}) {
    %0 = sdy.sharding_constraint %arg0 &amp;lt;@mesh, [{&quot;x&quot;}, {}]&amp;gt; : tensor&amp;lt;2048x8192xbf16&amp;gt;
    return %0 : tensor&amp;lt;2048x8192xbf16&amp;gt;
  }
}

XLA HLO:
 HloModule jit_all_gather, is_scheduled=true, entry_computation_layout={(bf16[1024,4096]{1,0:T(8,128)(2,1)})-&amp;gt;bf16[1024,8192]{1,0:T(8,128)(2,1)}}, num_partitions=4
ENTRY %main.5_spmd (param: bf16[1024,4096]) -&amp;gt; bf16[1024,8192] {
  %param = bf16[1024,4096]{1,0:T(8,128)(2,1)} parameter(0), sharding={devices=[2,2]&amp;lt;=[4]}, metadata={op_name=&quot;x&quot;}
  %all-gather = bf16[1024,8192]{1,0:T(8,128)(2,1)S(3)} all-gather(%param), channel_id=1, replica_groups=[2,2]&amp;lt;=[4], dimensions={1}, use_global_device_ids=true, metadata={op_name=&quot;jit(all_gather)/reshard&quot; source_file=&quot;/tmp/ipykernel_794398/1925679859.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;barrier_config&quot;:{&quot;barrier_type&quot;:&quot;CUSTOM&quot;,&quot;id&quot;:&quot;0&quot;},&quot;scoped_memory_configs&quot;:[],&quot;collective_algorithm_config&quot;:{&quot;emitter&quot;:&quot;1DAllGatherNonMajorDim&quot;,&quot;debug&quot;:&quot;\ngroup_size = 2 \nhas_reordering_map: false \nper_stride_size = 65536 bytes \nshard_size = 8388608 bytes &quot;},&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;0&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
  ROOT %copy.3 = bf16[1024,8192]{1,0:T(8,128)(2,1)} copy(%all-gather), backend_config={&quot;flag_configs&quot;:[],&quot;window_config&quot;:{&quot;kernel_window_bounds&quot;:[],&quot;output_window_bounds&quot;:[&quot;16&quot;,&quot;64&quot;],&quot;input_window_bounds&quot;:[],&quot;estimated_cycles&quot;:&quot;58232&quot;,&quot;iteration_bounds&quot;:[&quot;8&quot;,&quot;1&quot;]},&quot;megacore_config&quot;:{&quot;megacore_split_dim&quot;:&quot;0&quot;},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;8388608&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first representation above (output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lower&lt;/code&gt;) is in XLA’s StableHLO
language. It is slightly imposing, but there is a clearly written
&lt;a href=&quot;https://github.com/openxla/stablehlo/blob/main/docs/spec.md&quot;&gt;spec&lt;/a&gt; that helps
with parsing it after a bit of studying. It’s still too high level to clearly
show what communication primitives are being generated, though.&lt;/p&gt;

&lt;p&gt;The second representation (output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compile&lt;/code&gt;) is the result of the XLA
compiler’s first device-independent compilation stage; it’s in its own dialect
of HLO, which is different from StableHLO and doesn’t have as easily-accessible
of a public spec.&lt;sup id=&quot;fnref:8&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;
Here’s how to parse it above:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Types are relatively self-explanatory, aside from the text in braces—the
first sequence of integers here is most important, and it specifies the memory
layout of the array (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout.h&lt;/code&gt; in the XLA source). Axis indices are
listed in minor-to-major order (i.e., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1, 0&lt;/code&gt; denotes row-major layout).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all-gather&lt;/code&gt; semantics are clear at a high level: we gather along
dimension $1$ of our array. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replica_groups&lt;/code&gt; argument specifies which
devices communicate in the gather (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tile_assignment.h&lt;/code&gt; in the XLA
source)—compare to our input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%param&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sharding&lt;/code&gt; specified above to see
that these agree.&lt;/li&gt;
  &lt;li&gt;Independent of these lower-level details, we can see that the input and output
shapes are as we expect.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;alltoall&quot;&gt;AllToAll&lt;/h2&gt;

&lt;p&gt;We can test out AllToAll with a similar high-level API. Let’s start by
transposing the sharding axis of the output of the previous AllGather.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@jax.jit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all_to_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reshard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_to_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Output type: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;StableHLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XLA HLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The HLO that we get is more complex:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
Output type:  bfloat16[2048,8192@x]
StableHLO:
 module @jit_all_to_all attributes {mhlo.num_partitions = 4 : i32, mhlo.num_replicas = 1 : i32} {
  sdy.mesh @mesh = &amp;lt;[&quot;x&quot;=2, &quot;y&quot;=2]&amp;gt;
  func.func public @main(%arg0: tensor&amp;lt;2048x8192xbf16&amp;gt; {sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{&quot;x&quot;}, {}]&amp;gt;}) -&amp;gt; (tensor&amp;lt;2048x8192xbf16&amp;gt; {jax.result_info = &quot;result&quot;, sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{}, {&quot;x&quot;}]&amp;gt;}) {
    %0 = sdy.sharding_constraint %arg0 &amp;lt;@mesh, [{}, {&quot;x&quot;}]&amp;gt; : tensor&amp;lt;2048x8192xbf16&amp;gt;
    return %0 : tensor&amp;lt;2048x8192xbf16&amp;gt;
  }
}
XLA HLO:
 HloModule jit_all_to_all, is_scheduled=true, entry_computation_layout={(bf16[1024,8192]{1,0:T(8,128)(2,1)})-&amp;gt;bf16[2048,4096]{1,0:T(8,128)(2,1)}}, num_partitions=4
%fused_computation (param_0.1: bf16[128,2,8,4096]) -&amp;gt; bf16[1024,2,4096] {
  %param_0.1 = bf16[128,2,8,4096]{3,2,1,0:T(8,128)(2,1)} parameter(0)
  %copy.4 = bf16[128,2,8,4096]{3,2,0,1:T(8,128)(2,1)} copy(%param_0.1), metadata={op_name=&quot;jit(all_to_all)/reshard&quot; source_file=&quot;/tmp/ipykernel_874047/2971478236.py&quot; source_line=3}
  ROOT %bitcast.5 = bf16[1024,2,4096]{2,0,1:T(8,128)(2,1)S(3)} bitcast(%copy.4), metadata={op_name=&quot;jit(all_to_all)/reshard&quot; source_file=&quot;/tmp/ipykernel_874047/2971478236.py&quot; source_line=3}
}
ENTRY %main.5_spmd (param: bf16[1024,8192]) -&amp;gt; bf16[2048,4096] {
  %param = bf16[1024,8192]{1,0:T(8,128)(2,1)} parameter(0), sharding={devices=[2,1,2]&amp;lt;=[4] last_tile_dim_replicate}, metadata={op_name=&quot;x&quot;}
  %bitcast.7 = bf16[128,2,8,4096]{3,2,1,0:T(8,128)(2,1)} bitcast(%param)
  %copy_bitcast_fusion = bf16[1024,2,4096]{2,0,1:T(8,128)(2,1)S(3)} fusion(%bitcast.7), kind=kLoop, calls=%fused_computation, metadata={op_name=&quot;jit(all_to_all)/reshard&quot; source_file=&quot;/tmp/ipykernel_874047/2971478236.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;window_config&quot;:{&quot;kernel_window_bounds&quot;:[],&quot;output_window_bounds&quot;:[&quot;1&quot;,&quot;32&quot;,&quot;32&quot;],&quot;input_window_bounds&quot;:[],&quot;estimated_cycles&quot;:&quot;78212&quot;,&quot;iteration_bounds&quot;:[&quot;2&quot;,&quot;4&quot;,&quot;1&quot;]},&quot;megacore_config&quot;:{&quot;megacore_split_dim&quot;:&quot;1&quot;},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;8388608&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
  %all-to-all = bf16[1024,2,4096]{2,0,1:T(8,128)(2,1)S(3)} all-to-all(%copy_bitcast_fusion), channel_id=1, replica_groups=[2,2]&amp;lt;=[2,2]T(1,0), dimensions={1}, metadata={op_name=&quot;jit(all_to_all)/reshard&quot; source_file=&quot;/tmp/ipykernel_874047/2971478236.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;barrier_config&quot;:{&quot;barrier_type&quot;:&quot;GLOBAL&quot;,&quot;id&quot;:&quot;-1&quot;},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;262144&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
  %bitcast.6 = bf16[2048,4096]{1,0:T(8,128)(2,1)S(3)} bitcast(%all-to-all)
  ROOT %copy.6 = bf16[2048,4096]{1,0:T(8,128)(2,1)} copy(%bitcast.6), backend_config={&quot;flag_configs&quot;:[],&quot;window_config&quot;:{&quot;kernel_window_bounds&quot;:[],&quot;output_window_bounds&quot;:[&quot;32&quot;,&quot;32&quot;],&quot;input_window_bounds&quot;:[],&quot;estimated_cycles&quot;:&quot;58232&quot;,&quot;iteration_bounds&quot;:[&quot;8&quot;,&quot;1&quot;]},&quot;megacore_config&quot;:{&quot;megacore_split_dim&quot;:&quot;0&quot;},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;8388608&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some amount of the above amounts to memory optimizations that are necessary to
actually implement the communication in physical memory.&lt;sup id=&quot;fnref:9&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; We can more easily
interpret what’s going on by thinking in terms of block matrices again:
recall that we started with a $2048 \times 8192$ array $\vA$, sharded two ways:&lt;/p&gt;

\[\vA = \begin{bmatrix}
\vA_{00} &amp;amp; \vA_{01} \\
\vA_{10} &amp;amp; \vA_{11}
\end{bmatrix},\]

&lt;p&gt;and we performed an AllGather along the second axis, leading to (we’ll use
$\oplus_i$ for concatenation along dimension $i$)&lt;/p&gt;

\[\vB = \begin{bmatrix}
\vA_{00} \oplus_1 \vA_{01} &amp;amp; \vA_{00} \oplus_1 \vA_{01} \\
\vA_{10} \oplus_1 \vA_{11} &amp;amp; \vA_{10} \oplus_1 \vA_{11}
\end{bmatrix}.\]

&lt;p&gt;The output of the AllToAll reshards along the trailing axis, &lt;em&gt;but with respect
to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'x'&lt;/code&gt; mesh axis&lt;/em&gt;, which gives&lt;/p&gt;

\[\vC = \begin{bmatrix}
\vA_{00} \oplus_0 \vA_{10} &amp;amp; \vA_{00} \oplus_0 \vA_{10}  \\
\vA_{01} \oplus_0 \vA_{11} &amp;amp; \vA_{01} \oplus_0 \vA_{11}
\end{bmatrix}.\]

&lt;p&gt;To go from $\vB$ to $\vC$, we can do the following, which is essentially what
the HLO above is doing (modulo memory operations): unbind the concatenated
arrays, to give (in a rough approximation of tensor notation)&lt;/p&gt;

\[\begin{bmatrix}
(\vA_{00}, \vA_{01}) &amp;amp; (\vA_{00}, \vA_{01}) \\
(\vA_{10}, \vA_{11}) &amp;amp; (\vA_{10}, \vA_{11})
\end{bmatrix},\]

&lt;p&gt;then communicate ‘vertically’, swapping $01$ and $10$ on the left and right, to
get&lt;/p&gt;

\[\begin{bmatrix}
(\vA_{00}, \vA_{10}) &amp;amp; (\vA_{00}, \vA_{10}) \\
(\vA_{01}, \vA_{11}) &amp;amp; (\vA_{01}, \vA_{11})
\end{bmatrix}.\]

&lt;p&gt;If we concatenate these in the right order, we end up with $\vC$!
We can see that this is what the HLO is doing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;After some memory manipulations, an extra axis of size $2$ is split off from
the second dimension, making the local array shaped like $1024 \times 2 \times
4096$.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all-to-all&lt;/code&gt; function has to be interpreted relative to the input
sharding. Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{devices=[2,1,2]&amp;lt;=[4] last_tile_dim_replicate}&lt;/code&gt; denotes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2,
1]&lt;/code&gt; tile size, replicated twice; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=[4]&lt;/code&gt; is equivalent to a device list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{0,
1, 2, 3}&lt;/code&gt;. This is as we expect—the input is sharded over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'x'&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Now, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all-to-all&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replica_groups=[2,2]&amp;lt;=[2,2]T(1,0)&lt;/code&gt; specifies how the
communication is done across devices (relative to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sharding&lt;/code&gt; previously
specified). This corresponds to a specification of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{0, 2}, {1,
3}}&lt;/code&gt; (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hlo_sharding.h&lt;/code&gt; in the XLA source), which means that
each replica’s array gets split into two parts along dimension $1$ (the axis
of length $2$), then communication occurs across the specified groups. This
gets us what we wanted above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s slightly interesting to note that different input sharding and an AllToAll
leads to different memory operations in the HLO:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@jax.jit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all_to_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reshard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_to_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Output type: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;StableHLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XLA HLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
Output type:  bfloat16[2048@x,8192]
StableHLO:
 module @jit_all_to_all attributes {mhlo.num_partitions = 4 : i32, mhlo.num_replicas = 1 : i32} {
  sdy.mesh @mesh = &amp;lt;[&quot;x&quot;=2, &quot;y&quot;=2]&amp;gt;
  func.func public @main(%arg0: tensor&amp;lt;2048x8192xbf16&amp;gt; {sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{}, {&quot;x&quot;}]&amp;gt;}) -&amp;gt; (tensor&amp;lt;2048x8192xbf16&amp;gt; {jax.result_info = &quot;result&quot;, sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{&quot;x&quot;}, {}]&amp;gt;}) {
    %0 = sdy.sharding_constraint %arg0 &amp;lt;@mesh, [{&quot;x&quot;}, {}]&amp;gt; : tensor&amp;lt;2048x8192xbf16&amp;gt;
    return %0 : tensor&amp;lt;2048x8192xbf16&amp;gt;
  }
}
XLA HLO:
 HloModule jit_all_to_all, is_scheduled=true, entry_computation_layout={(bf16[2048,4096]{1,0:T(8,128)(2,1)})-&amp;gt;bf16[1024,8192]{1,0:T(8,128)(2,1)}}, num_partitions=4
ENTRY %main.5_spmd (param: bf16[2048,4096]) -&amp;gt; bf16[1024,8192] {
  %param = bf16[2048,4096]{1,0:T(8,128)(2,1)} parameter(0), sharding={devices=[1,2,2]&amp;lt;=[4] last_tile_dim_replicate}, metadata={op_name=&quot;x&quot;}
  %bitcast.5 = bf16[2,1024,4096]{2,1,0:T(8,128)(2,1)} bitcast(%param)
  %all-to-all = bf16[2,1024,4096]{2,1,0:T(8,128)(2,1)S(3)} all-to-all(%bitcast.5), channel_id=1, replica_groups=[2,2]&amp;lt;=[2,2]T(1,0), dimensions={0}, metadata={op_name=&quot;jit(all_to_all)/reshard&quot; source_file=&quot;/tmp/ipykernel_874047/814736672.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;barrier_config&quot;:{&quot;barrier_type&quot;:&quot;GLOBAL&quot;,&quot;id&quot;:&quot;-1&quot;},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;0&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
  %copy.3 = bf16[2,1024,4096]{1,2,0:T(8,128)(2,1)S(3)} copy(%all-to-all), metadata={op_name=&quot;jit(all_to_all)/reshard&quot; source_file=&quot;/tmp/ipykernel_874047/814736672.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;window_config&quot;:{&quot;kernel_window_bounds&quot;:[],&quot;output_window_bounds&quot;:[&quot;1&quot;,&quot;48&quot;,&quot;8&quot;],&quot;input_window_bounds&quot;:[&quot;1&quot;,&quot;128&quot;,&quot;3&quot;],&quot;estimated_cycles&quot;:&quot;47696&quot;,&quot;iteration_bounds&quot;:[&quot;1&quot;,&quot;11&quot;,&quot;1&quot;]},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;3145728&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
  %bitcast.4 = bf16[1024,8192]{0,1:T(8,128)(2,1)S(3)} bitcast(%copy.3)
  ROOT %copy.4 = bf16[1024,8192]{1,0:T(8,128)(2,1)} copy(%bitcast.4), metadata={op_name=&quot;jit(all_to_all)/reshard&quot; source_file=&quot;/tmp/ipykernel_874047/814736672.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;window_config&quot;:{&quot;kernel_window_bounds&quot;:[],&quot;output_window_bounds&quot;:[&quot;64&quot;,&quot;6&quot;],&quot;input_window_bounds&quot;:[&quot;96&quot;,&quot;4&quot;],&quot;estimated_cycles&quot;:&quot;67782&quot;,&quot;iteration_bounds&quot;:[&quot;1&quot;,&quot;11&quot;]},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;3182592&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The HLO for this operation is more concise, but neither is able to avoid
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy&lt;/code&gt; operation.&lt;/p&gt;

&lt;h2 id=&quot;allreduce-and-reducescatter&quot;&gt;AllReduce and ReduceScatter&lt;/h2&gt;

&lt;p&gt;To trigger an AllReduce/ReduceScatter, let’s follow our matrix multiplication example
above—we’ll multiply two arrays that are both sharded along the contracting
dimension.
In the AllToAll section, we’ve generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;, which is sharded along &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'x'&lt;/code&gt; in
its 1st dimension. We can try computing a Gram matrix associated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;, and
specifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out_sharding&lt;/code&gt; (singular!) in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dot&lt;/code&gt; operation to avoid the
compiler complaining:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@jax.jit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_sharding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Output type: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;StableHLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XLA HLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
Output type:  bfloat16[2048,2048]
StableHLO:
 module @jit_gram attributes {mhlo.num_partitions = 4 : i32, mhlo.num_replicas = 1 : i32} {
  sdy.mesh @mesh = &amp;lt;[&quot;x&quot;=2, &quot;y&quot;=2]&amp;gt;
  func.func public @main(%arg0: tensor&amp;lt;2048x8192xbf16&amp;gt; {sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{}, {&quot;x&quot;}]&amp;gt;}) -&amp;gt; (tensor&amp;lt;2048x2048xbf16&amp;gt; {jax.result_info = &quot;result&quot;, sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{}, {}]&amp;gt;}) {
    %0 = stablehlo.transpose %arg0, dims = [1, 0] : (tensor&amp;lt;2048x8192xbf16&amp;gt;) -&amp;gt; tensor&amp;lt;8192x2048xbf16&amp;gt;
    %1 = sdy.sharding_constraint %0 &amp;lt;@mesh, [{&quot;x&quot;}, {}]&amp;gt; : tensor&amp;lt;8192x2048xbf16&amp;gt;
    %2 = stablehlo.dot_general %arg0, %1, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor&amp;lt;2048x8192xbf16&amp;gt;, tensor&amp;lt;8192x2048xbf16&amp;gt;) -&amp;gt; tensor&amp;lt;2048x2048xbf16&amp;gt;
    %3 = sdy.sharding_constraint %2 &amp;lt;@mesh, [{}, {}]&amp;gt; : tensor&amp;lt;2048x2048xbf16&amp;gt;
    return %3 : tensor&amp;lt;2048x2048xbf16&amp;gt;
  }
}
XLA HLO:
 HloModule jit_gram, is_scheduled=true, entry_computation_layout={(bf16[2048,4096]{1,0:T(8,128)(2,1)})-&amp;gt;bf16[2048,2048]{1,0:T(8,128)(2,1)}}, num_partitions=4
%add.clone (x.1: bf16[], y.1: bf16[]) -&amp;gt; bf16[] {
  %y.1 = bf16[]{:T(256)} parameter(1)
  %x.1 = bf16[]{:T(256)} parameter(0)
  ROOT %add.1 = bf16[]{:T(256)} add(%x.1, %y.1)
}
%bitcast_fusion (bitcast_input: bf16[2048,4096]) -&amp;gt; bf16[2048,4096] {
  %bitcast_input = bf16[2048,4096]{1,0:T(8,128)(2,1)S(3)} parameter(0)
  ROOT %bitcast = bf16[2048,4096]{1,0:T(8,128)(2,1)} bitcast(%bitcast_input)
}
%bitcast_fusion.1 (bitcast_input.1: bf16[2048,4096]) -&amp;gt; bf16[2048,4096] {
  %bitcast_input.1 = bf16[2048,4096]{1,0:T(8,128)(2,1)S(3)} parameter(0)
  ROOT %bitcast.1 = bf16[2048,4096]{1,0:T(8,128)(2,1)} bitcast(%bitcast_input.1)
}
%fused_computation (param_0: bf16[2048,4096]) -&amp;gt; bf16[2048,2048] {
  %param_0 = bf16[2048,4096]{1,0:T(8,128)(2,1)S(3)} parameter(0)
  %fusion.1 = bf16[2048,4096]{1,0:T(8,128)(2,1)} fusion(%param_0), kind=kLoop, calls=%bitcast_fusion
  %fusion.2 = bf16[2048,4096]{1,0:T(8,128)(2,1)} fusion(%param_0), kind=kLoop, calls=%bitcast_fusion.1
  ROOT %convolution.1 = bf16[2048,2048]{1,0:T(8,128)(2,1)S(3)} convolution(%fusion.1, %fusion.2), dim_labels=bf_oi-&amp;gt;bf, metadata={op_name=&quot;jit(gram)/dot_general&quot; source_file=&quot;/tmp/ipykernel_874047/670048905.py&quot; source_line=3}
}
ENTRY %main.8_spmd (param: bf16[2048,4096]) -&amp;gt; bf16[2048,2048] {
  %param = bf16[2048,4096]{1,0:T(8,128)(2,1)} parameter(0), sharding={devices=[1,2,2]&amp;lt;=[4] last_tile_dim_replicate}, metadata={op_name=&quot;x&quot;}
  %copy-start = (bf16[2048,4096]{1,0:T(8,128)(2,1)S(3)}, bf16[2048,4096]{1,0:T(8,128)(2,1)}, u32[]{:S(2)}) copy-start(%param), cross_program_prefetch_index=0
  %copy-done = bf16[2048,4096]{1,0:T(8,128)(2,1)S(3)} copy-done(%copy-start)
  %fusion = bf16[2048,2048]{1,0:T(8,128)(2,1)S(3)} fusion(%copy-done), kind=kOutput, calls=%fused_computation, metadata={op_name=&quot;jit(gram)/dot_general&quot; source_file=&quot;/tmp/ipykernel_874047/670048905.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;window_config&quot;:{&quot;kernel_window_bounds&quot;:[&quot;64&quot;,&quot;32&quot;],&quot;output_window_bounds&quot;:[&quot;64&quot;,&quot;4&quot;],&quot;input_window_bounds&quot;:[&quot;64&quot;,&quot;32&quot;],&quot;estimated_cycles&quot;:&quot;149352&quot;,&quot;iteration_bounds&quot;:[&quot;4&quot;,&quot;4&quot;,&quot;1&quot;]},&quot;megacore_config&quot;:{&quot;megacore_split_dim&quot;:&quot;0&quot;},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;5734400&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;},&quot;convolution_algorithm_config&quot;:{&quot;emitter&quot;:&quot;EmitAllBatchInSublanes&quot;}}
  ROOT %all-reduce = bf16[2048,2048]{1,0:T(8,128)(2,1)} all-reduce(%fusion), channel_id=1, replica_groups=[2,2]&amp;lt;=[2,2]T(1,0), use_global_device_ids=true, to_apply=%add.clone, metadata={op_name=&quot;jit(gram)/dot_general&quot; source_file=&quot;/tmp/ipykernel_874047/670048905.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;barrier_config&quot;:{&quot;barrier_type&quot;:&quot;CUSTOM&quot;,&quot;id&quot;:&quot;0&quot;},&quot;scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;0&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;67108864&quot;}],&quot;collective_algorithm_config&quot;:{&quot;emitter&quot;:&quot;RotatedPincerEmitter&quot;,&quot;strategy&quot;:&quot;UniDirection1DRingStrategy&quot;,&quot;debug&quot;:&quot;\nUniDirection1DRingStrategy{colors:2 phases:1 cores:{2},{2} nophase0:0 reserved_sflags:0 cross_module_on_2d_plane:0 has_reordering_map:0 use_routing_table_indices:0}&quot;},&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;12582912&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above is relatively clear! A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy&lt;/code&gt; operation accounts for the fact that
we’re multiplying the matrix with itself to calculate the Gram matrix, then the
actual multiplication is performed with the XLA &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convolution&lt;/code&gt; operation. It’s
performed on each local shard, and then the local shards are accumulated and
shared with an AllReduce.&lt;/p&gt;

&lt;p&gt;We expect to be able to trigger a ReduceScatter instead of an AllReduce by
asking the computation output to be sharded in a particular way (rather than
fully replicated, as above). Let’s try to verify this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@jax.jit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dot_custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_sharding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bfloat16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_sharding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NamedSharding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot_custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Output type: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;StableHLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XLA HLO:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
Output type:  bfloat16[2048@x,4096@y]
StableHLO:
 module @jit_dot_custom attributes {mhlo.num_partitions = 4 : i32, mhlo.num_replicas = 1 : i32} {
  sdy.mesh @mesh = &amp;lt;[&quot;x&quot;=2, &quot;y&quot;=2]&amp;gt;
  func.func public @main(%arg0: tensor&amp;lt;2048x8192xbf16&amp;gt; {sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{&quot;x&quot;}, {&quot;y&quot;}]&amp;gt;}, %arg1: tensor&amp;lt;8192x4096xbf16&amp;gt; {sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{&quot;y&quot;}, {}]&amp;gt;}) -&amp;gt; (tensor&amp;lt;2048x4096xbf16&amp;gt; {jax.result_info = &quot;result&quot;, sdy.sharding = #sdy.sharding&amp;lt;@mesh, [{&quot;x&quot;}, {&quot;y&quot;}]&amp;gt;}) {
    %0 = stablehlo.dot_general %arg0, %arg1, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor&amp;lt;2048x8192xbf16&amp;gt;, tensor&amp;lt;8192x4096xbf16&amp;gt;) -&amp;gt; tensor&amp;lt;2048x4096xbf16&amp;gt;
    %1 = sdy.sharding_constraint %0 &amp;lt;@mesh, [{&quot;x&quot;}, {&quot;y&quot;}]&amp;gt; : tensor&amp;lt;2048x4096xbf16&amp;gt;
    return %1 : tensor&amp;lt;2048x4096xbf16&amp;gt;
  }
}
XLA HLO:
 HloModule jit_dot_custom, is_scheduled=true, entry_computation_layout={(bf16[1024,4096]{1,0:T(8,128)(2,1)}, bf16[4096,4096]{1,0:T(8,128)(2,1)})-&amp;gt;bf16[1024,2048]{1,0:T(8,128)(2,1)}}, allow_spmd_sharding_propagation_to_parameters={false,false}, num_partitions=4
%add.1.clone (x.3: bf16[], y.3: bf16[]) -&amp;gt; bf16[] {
  %y.3 = bf16[]{:T(256)} parameter(1)
  %x.3 = bf16[]{:T(256)} parameter(0)
  ROOT %add.3 = bf16[]{:T(256)} add(%x.3, %y.3)
}
%all-reduce-scatter (input: bf16[1024,4096]) -&amp;gt; bf16[1024,2048] {
  %input = bf16[1024,4096]{1,0:T(8,128)(2,1)S(3)} parameter(0)
  %all-reduce.2 = bf16[1024,4096]{1,0:T(8,128)(2,1)} all-reduce(%input), channel_id=3, replica_groups={{0,1},{2,3}}, use_global_device_ids=true, to_apply=%add.1.clone, frontend_attributes={from-cross-replica-sharding=&quot;true&quot;}, backend_config={&quot;flag_configs&quot;:[],&quot;barrier_config&quot;:{&quot;barrier_type&quot;:&quot;CUSTOM&quot;,&quot;id&quot;:&quot;0&quot;},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[]}
  %constant.13 = u32[] constant(0)
  %constant.shard_id_table = u32[4]{0:T(128)} constant({0, 1, 0, 1})
  %partition-id.1 = u32[] partition-id()
  %dynamic-slice.3 = u32[1]{0:T(128)} dynamic-slice(%constant.shard_id_table, %partition-id.1), dynamic_slice_sizes={1}, backend_config={&quot;flag_configs&quot;:[],&quot;scoped_memory_configs&quot;:[],&quot;indices_config&quot;:{&quot;index_known_bits&quot;:[{&quot;zeroes&quot;:&quot;0&quot;,&quot;ones&quot;:&quot;0&quot;,&quot;bitwidth&quot;:&quot;32&quot;}],&quot;is_index_aligned&quot;:[false]},&quot;used_scoped_memory_configs&quot;:[]}
  %bitcast.1 = u32[]{:T(128)} bitcast(%dynamic-slice.3)
  %constant.14 = u32[] constant(2048)
  %multiply.3 = u32[]{:T(128)} multiply(%bitcast.1, %constant.14)
  ROOT %dynamic-slice.4 = bf16[1024,2048]{1,0:T(8,128)(2,1)} dynamic-slice(%all-reduce.2, %constant.13, %multiply.3), dynamic_slice_sizes={1024,2048}, backend_config={&quot;flag_configs&quot;:[],&quot;scoped_memory_configs&quot;:[],&quot;indices_config&quot;:{&quot;index_known_bits&quot;:[{&quot;zeroes&quot;:&quot;4294967295&quot;,&quot;ones&quot;:&quot;0&quot;,&quot;bitwidth&quot;:&quot;32&quot;},{&quot;zeroes&quot;:&quot;4294961151&quot;,&quot;ones&quot;:&quot;0&quot;,&quot;bitwidth&quot;:&quot;32&quot;}],&quot;is_index_aligned&quot;:[true,false]},&quot;used_scoped_memory_configs&quot;:[]}
}
%bitcast_fusion (bitcast_input: bf16[1024,4096]) -&amp;gt; bf16[1024,4096] {
  %bitcast_input = bf16[1024,4096]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.2 = bf16[1024,4096]{1,0:T(8,128)(2,1)} bitcast(%bitcast_input)
}
%bitcast_fusion.1 (bitcast_input.1: bf16[4096,4096]) -&amp;gt; bf16[4096,4096] {
  %bitcast_input.1 = bf16[4096,4096]{1,0:T(8,128)(2,1)S(3)} parameter(0)
  ROOT %bitcast.3 = bf16[4096,4096]{1,0:T(8,128)(2,1)} bitcast(%bitcast_input.1)
}
%fused_computation (param_0: bf16[1024,4096], param_1: bf16[4096,4096]) -&amp;gt; bf16[1024,4096] {
  %param_0 = bf16[1024,4096]{1,0:T(8,128)(2,1)} parameter(0)
  %fusion.2 = bf16[1024,4096]{1,0:T(8,128)(2,1)} fusion(%param_0), kind=kLoop, calls=%bitcast_fusion
  %param_1 = bf16[4096,4096]{1,0:T(8,128)(2,1)S(3)} parameter(1)
  %fusion.3 = bf16[4096,4096]{1,0:T(8,128)(2,1)} fusion(%param_1), kind=kLoop, calls=%bitcast_fusion.1
  ROOT %convolution.1 = bf16[1024,4096]{1,0:T(8,128)(2,1)S(3)} convolution(%fusion.2, %fusion.3), dim_labels=bf_io-&amp;gt;bf, metadata={op_name=&quot;jit(dot_custom)/dot_general&quot; source_file=&quot;/tmp/ipykernel_874047/871715024.py&quot; source_line=3}
}
ENTRY %main.7_spmd (param: bf16[1024,4096], param.1: bf16[4096,4096]) -&amp;gt; bf16[1024,2048] {
  %param.1 = bf16[4096,4096]{1,0:T(8,128)(2,1)} parameter(1), sharding={devices=[2,1,2]&amp;lt;=[2,2]T(1,0) last_tile_dim_replicate}, metadata={op_name=&quot;y&quot;}
  %copy-start = (bf16[4096,4096]{1,0:T(8,128)(2,1)S(3)}, bf16[4096,4096]{1,0:T(8,128)(2,1)}, u32[]{:S(2)}) copy-start(%param.1), cross_program_prefetch_index=0
  %param = bf16[1024,4096]{1,0:T(8,128)(2,1)} parameter(0), sharding={devices=[2,2]&amp;lt;=[4]}, metadata={op_name=&quot;x&quot;}
  %copy-done = bf16[4096,4096]{1,0:T(8,128)(2,1)S(3)} copy-done(%copy-start)
  %fusion.1 = bf16[1024,4096]{1,0:T(8,128)(2,1)S(3)} fusion(%param, %copy-done), kind=kOutput, calls=%fused_computation, metadata={op_name=&quot;jit(dot_custom)/dot_general&quot; source_file=&quot;/tmp/ipykernel_874047/871715024.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;window_config&quot;:{&quot;kernel_window_bounds&quot;:[&quot;512&quot;,&quot;4&quot;],&quot;output_window_bounds&quot;:[&quot;32&quot;,&quot;4&quot;],&quot;input_window_bounds&quot;:[&quot;32&quot;,&quot;32&quot;],&quot;estimated_cycles&quot;:&quot;144544&quot;,&quot;iteration_bounds&quot;:[&quot;8&quot;,&quot;4&quot;,&quot;1&quot;]},&quot;megacore_config&quot;:{&quot;megacore_split_dim&quot;:&quot;1&quot;},&quot;scoped_memory_configs&quot;:[],&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;5591040&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;},&quot;convolution_algorithm_config&quot;:{&quot;emitter&quot;:&quot;EmitAllBatchInSublanes&quot;}}
  ROOT %fusion = bf16[1024,2048]{1,0:T(8,128)(2,1)} fusion(%fusion.1), kind=kCustom, calls=%all-reduce-scatter, metadata={op_name=&quot;jit(dot_custom)/dot_general&quot; source_file=&quot;/tmp/ipykernel_874047/871715024.py&quot; source_line=3}, backend_config={&quot;flag_configs&quot;:[],&quot;scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;0&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;67108864&quot;}],&quot;collective_algorithm_config&quot;:{&quot;emitter&quot;:&quot;SingleInputAllReduceScatterFusion&quot;,&quot;strategy&quot;:&quot;StrategyRing&quot;,&quot;debug&quot;:&quot;\nStrategyRing{colors:1 phases:1 cores:{2} nophase0:0 reserved_sflags:0 cross_module_on_2d_plane:0 has_reordering_map:0 use_routing_table_indices:0}\nStrategyRing{colors:1 phases:1 cores:{2} nophase0:0 reserved_sflags:0 cross_module_on_2d_plane:0 has_reordering_map:0 use_routing_table_indices:0}\nType: 1D phase_count: 1; color_count: 1; sharded_partitions: 4; original_shape: bf16[1024,4096]{1,0:T(8,128)(2,1)S(3)}; per_color_shard_counts: 2; color_dim: -1; sharding_dim: 1; sharding_type: minor; convert_all_gather_output_to_bf16: 0; formatting steps: ()\nall-reduce-scatter fusion ND: span_size:8192*k512Byte, shard count:2, span_count:2, total_size:16384*k512Byte, valid_granules:16384*k512Byte&quot;},&quot;used_scoped_memory_configs&quot;:[{&quot;memory_space&quot;:&quot;1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;size&quot;:&quot;12582912&quot;}],&quot;retry_config&quot;:{&quot;retry_count&quot;:&quot;0&quot;}}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I actually haven’t found a way to generate a ReduceScatter operation in the
HLO—if you know how to do this, please let me know! Above, I’ve picked
different shardings and arrays, and we end up triggering an operation similar in
effect to a ReduceScatter; but the HLO implementation instead uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all-reduce&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic-slice&lt;/code&gt; to split up the reduced array.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This turned out to be on the longer side! But we have two valuable takeaways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A linear-algebraic mental model for sharding in JAX—sharded dimensions
partition data, and unsharded dimensions lead to replication in the
underlying mesh! All of this can be understood in terms of block matrices and
their algebra.&lt;/li&gt;
  &lt;li&gt;The ability to read HLO and parse the communications primitives that arise
therein when we manipulate sharded arrays.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also recapped information from the TPU Scaling book about how to
interpret performance tradeoffs between these different forms of communication.&lt;/p&gt;

&lt;h1 id=&quot;acknowledgments&quot;&gt;Acknowledgments&lt;/h1&gt;

&lt;p&gt;Thanks to the &lt;a href=&quot;https://sites.research.google/trc/about/&quot;&gt;TRC program&lt;/a&gt; for
compute support.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;One way to generalize this to simultaneously considering different meshes
is to consider that the mesh simply indexes different physical devices axes,
or ‘merges’ of them. Hence if there are $M$ physical device axes (e.g.,
devices with 3D interconnects), one can count shardings across meshes by
allowing the $k$ selected axes to be merged together. This is
a noncommutative merging, as the traversal order for the devices will be
different based on the ordering of the merged axes. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;To go beyond this restriction, it suffices to think of the mapping between
block indices and devices as being performed by a pre-configured mesh.
Algebraically, the mesh axis corresponds to a sort of ‘block permutation
matrix’ (i.e., a tensor product of a permutation matrix with the identity),
which left-multiplies for sharding the first dimension of the matrix, and
right-multiplies for the second. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Note that, algebraically, if we perform copying to represent a partitioned
matrix in terms of devices, then &lt;em&gt;elementwise&lt;/em&gt; matrix multiplication
corresponds to the within-device matrix products!) &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;E.g., about 42 GB/s for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4&lt;/code&gt; TPUs. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Since AllGather is linear, its derivative doesn’t involve any cached
activations from the forward pass, so we omit these from the notation. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;But the translator is open source, and the admissible operations can be
gleaned from the source code (use Google’s LLM for help with this!).
A high-level specification of operations can be found &lt;a href=&quot;https://openxla.org/xla/operation_semantics&quot;&gt;here&lt;/a&gt;. &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Some high-level takeaways about these operations: think of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitcast&lt;/code&gt; like
a view of the array, at least in this context, whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy&lt;/code&gt; doesn’t change
the underlying tensor, but does change the memory layout. (Notice that the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy&lt;/code&gt; operation involves a transposition of the layout axes.) &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Sam Buchanan</name>
          
            <email>sam@ttic.edu</email>
          
          
        </author>
      

      
        <category term="jax" />
      

      

      
        <summary type="html">This post will be the first in a series on programming with JAX, for training models like transformers. I’m experimenting with these as an alternative to my usual scratch paper or LaTeX notes while learning, in the hope that it will help me with recall and perhaps be useful to others learning this material.</summary>
      

      
      
    </entry>
  
  
</feed>
